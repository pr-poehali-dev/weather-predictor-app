import json
import os
from typing import Dict, Any
import urllib.request

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: Telegram –±–æ—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–≥–æ–¥–µ
    Args: event - dict —Å httpMethod, body (webhook –æ—Ç Telegram)
          context - object —Å request_id
    Returns: HTTP response dict
    '''
    method: str = event.get('httpMethod', 'POST')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': '',
            'isBase64Encoded': False
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': 'Method not allowed'}),
            'isBase64Encoded': False
        }
    
    body_data = json.loads(event.get('body', '{}'))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram
    if 'message' in body_data:
        message = body_data['message']
        chat_id = message['chat']['id']
        text = message.get('text', '')
        
        response_text = handle_command(text, chat_id)
        send_message(chat_id, response_text)
    
    return {
        'statusCode': 200,
        'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        },
        'body': json.dumps({'ok': True}),
        'isBase64Encoded': False
    }

def handle_command(text: str, chat_id: int) -> str:
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞'''
    
    if text.startswith('/start'):
        return '''üê∫ *–ü—Ä–∏–≤–µ—Ç! –Ø –í–æ–ª–∫-—Å–∏–Ω–æ–ø—Ç–∏–∫!*

–Ø –ø–æ–º–æ–≥—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –∏ –ø—ã–ª—å—Ü–µ.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/settings - –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/email - –î–æ–±–∞–≤–∏—Ç—å email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/help - –ü–æ–º–æ—â—å

–í–∞—à Chat ID: `{}`

–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ —É–∫–∞–∂–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –Ω–∞ —Å–∞–π—Ç–µ!'''.format(chat_id)
    
    elif text.startswith('/subscribe'):
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
        return '''‚úÖ *–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!*

–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º:
üå°Ô∏è –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
üå∏ –£—Ä–æ–≤–µ–Ω—å –ø—ã–ª—å—Ü—ã (–ø—Ä–∏ –≤—ã—Å–æ–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö)
‚ö° –í–∞–∂–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.'''
    
    elif text.startswith('/unsubscribe'):
        return '''‚ùå *–í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe'''
    
    elif text.startswith('/settings'):
        return '''‚öôÔ∏è *–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*

Chat ID: `{}`
–°—Ç–∞—Ç—É—Å: –ü–æ–¥–ø–∏—Å–∞–Ω ‚úÖ

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:
/email - –î–æ–±–∞–≤–∏—Ç—å email
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è'''.format(chat_id)
    
    elif text.startswith('/email'):
        parts = text.split(' ', 1)
        if len(parts) > 1:
            email = parts[1]
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å email –≤ –ë–î
            return f'''üìß *Email –¥–æ–±–∞–≤–ª–µ–Ω!*

–¢–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞:
‚Ä¢ Telegram: `{chat_id}`
‚Ä¢ Email: `{email}`'''
        else:
            return '''üìß *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ email*

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/email your@email.com`

–ü—Ä–∏–º–µ—Ä: `/email ivan@gmail.com`'''
    
    elif text.startswith('/help'):
        return '''‚ùì *–°–ø—Ä–∞–≤–∫–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è
/email - –î–æ–±–∞–≤–∏—Ç—å email
/settings - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

*–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*
üå°Ô∏è –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
üå∏ –£—Ä–æ–≤–µ–Ω—å –ø—ã–ª—å—Ü—ã
‚ö° –ü–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

*–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?*
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'''
    
    else:
        return '''ü§î –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.'''

def send_message(chat_id: int, text: str) -> bool:
    '''–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram'''
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    
    if not bot_token:
        return False
    
    url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
    
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'Markdown'
    }
    
    try:
        req = urllib.request.Request(
            url,
            data=json.dumps(data).encode('utf-8'),
            headers={'Content-Type': 'application/json'}
        )
        
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode('utf-8'))
            return result.get('ok', False)
    except:
        return False
