import { useState, useEffect } from 'react';
import { Card } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import Icon from '@/components/ui/icon';
import { useToast } from '@/hooks/use-toast';

const NOTIFICATIONS_API = 'https://functions.poehali.dev/69d98fba-a11e-4a25-bab8-02070f305ce1';

export default function NotificationSettings() {
  const { toast } = useToast();
  const [settings, setSettings] = useState({
    email: '',
    telegram: '',
    emailEnabled: false,
    telegramEnabled: false,
    pollenHigh: true,
    pollenMedium: false,
    weatherAlert: true,
    dailyForecast: false,
    dailyForecastTime: '08:00'
  });

  useEffect(() => {
    const saved = localStorage.getItem('weatherNotifications');
    if (saved) {
      setSettings(JSON.parse(saved));
    }
  }, []);

  const handleSave = () => {
    if (settings.emailEnabled && !settings.email) {
      toast({
        title: '‚ùå –û—à–∏–±–∫–∞',
        description: '–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
        variant: 'destructive'
      });
      return;
    }

    if (settings.telegramEnabled && !settings.telegram) {
      toast({
        title: '‚ùå –û—à–∏–±–∫–∞',
        description: '–í–≤–µ–¥–∏—Ç–µ Telegram ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
        variant: 'destructive'
      });
      return;
    }

    localStorage.setItem('weatherNotifications', JSON.stringify(settings));
    
    toast({
      title: '‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
      description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!',
    });
  };

  const handleTestNotification = async () => {
    if (!settings.emailEnabled && !settings.telegramEnabled) {
      toast({
        title: '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ',
        description: '–í–∫–ª—é—á–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
        variant: 'destructive'
      });
      return;
    }

    try {
      const response = await fetch(NOTIFICATIONS_API, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email: settings.emailEnabled ? settings.email : '',
          telegram: settings.telegramEnabled ? settings.telegram : '',
          message: 'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –í–æ–ª–∫-—Å–∏–Ω–æ–ø—Ç–∏–∫!\n\n–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.',
          type: 'info'
        })
      });

      const result = await response.json();
      
      if (result.success) {
        toast({
          title: '‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω',
          description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏–ª–∏ Telegram.',
        });
      } else {
        toast({
          title: '‚ùå –û—à–∏–±–∫–∞',
          description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
          variant: 'destructive'
        });
      }
    } catch (error) {
      toast({
        title: '‚ùå –û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É',
        variant: 'destructive'
      });
    }
  };

  return (
    <Card className="p-6 bg-white/95 backdrop-blur-sm border-0 shadow-xl">
      <div className="flex items-center gap-3 mb-6">
        <div className="p-2 rounded-lg bg-gradient-to-br from-[#4A90E2] to-[#98D8C8]">
          <Icon name="Bell" size={24} className="text-white" />
        </div>
        <div>
          <h3 className="text-xl font-semibold text-[#34495E]">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
          <p className="text-sm text-[#34495E]/60">–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –∏ –∞–ª–ª–µ—Ä–≥–µ–Ω–∞—Ö</p>
        </div>
      </div>

      <div className="space-y-6">
        <div className="space-y-4">
          <div className="flex items-center justify-between p-4 rounded-lg bg-gradient-to-r from-blue-50 to-blue-100">
            <div className="flex items-center gap-3">
              <Icon name="Mail" size={20} className="text-[#4A90E2]" />
              <Label htmlFor="email-notifications" className="font-medium text-[#34495E]">
                Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
              </Label>
            </div>
            <Switch
              id="email-notifications"
              checked={settings.emailEnabled}
              onCheckedChange={(checked) => setSettings({ ...settings, emailEnabled: checked })}
            />
          </div>

          {settings.emailEnabled && (
            <div className="ml-4 pl-4 border-l-2 border-blue-200">
              <Input
                type="email"
                placeholder="your@email.com"
                value={settings.email}
                onChange={(e) => setSettings({ ...settings, email: e.target.value })}
                className="max-w-md"
              />
            </div>
          )}
        </div>

        <div className="space-y-4">
          <div className="flex items-center justify-between p-4 rounded-lg bg-gradient-to-r from-[#98D8C8]/30 to-[#4A90E2]/30">
            <div className="flex items-center gap-3">
              <Icon name="Send" size={20} className="text-[#4A90E2]" />
              <Label htmlFor="telegram-notifications" className="font-medium text-[#34495E]">
                Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
              </Label>
            </div>
            <Switch
              id="telegram-notifications"
              checked={settings.telegramEnabled}
              onCheckedChange={(checked) => setSettings({ ...settings, telegramEnabled: checked })}
            />
          </div>

          {settings.telegramEnabled && (
            <div className="ml-4 pl-4 border-l-2 border-[#98D8C8] space-y-3">
              <Input
                type="text"
                placeholder="@username –∏–ª–∏ Chat ID"
                value={settings.telegram}
                onChange={(e) => setSettings({ ...settings, telegram: e.target.value })}
                className="max-w-md"
              />
              
              <div className="p-3 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-lg border border-blue-200">
                <p className="text-sm font-medium text-[#34495E] mb-2">
                  ü§ñ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞:
                </p>
                <ol className="text-xs text-[#34495E]/70 space-y-1 ml-4 list-decimal">
                  <li>–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @–í–∞—à–ë–æ—ÇName –∫–æ–º–∞–Ω–¥—É /start</li>
                  <li>–ë–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –≤–∞—à Chat ID ‚Äî —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ —Å—é–¥–∞</li>
                  <li>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: /subscribe, /email</li>
                </ol>
                <p className="text-xs text-[#34495E]/50 mt-2">
                  üí° –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å @username (–Ω–∞–ø—Ä–∏–º–µ—Ä @ivan) –∏–ª–∏ Chat ID (123456789)
                </p>
              </div>
            </div>
          )}
        </div>

        <div className="pt-4 border-t border-[#34495E]/10">
          <h4 className="font-semibold text-[#34495E] mb-4">–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h4>
          
          <div className="space-y-3">
            <div className="flex items-center justify-between p-3 rounded-lg hover:bg-red-50 transition-colors">
              <div className="flex items-center gap-3">
                <Icon name="AlertTriangle" size={18} className="text-red-500" />
                <div>
                  <div className="font-medium text-[#34495E]">–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—ã–ª—å—Ü—ã</div>
                  <div className="text-xs text-[#34495E]/60">–ò–Ω–¥–µ–∫—Å {'>'} 9.0</div>
                </div>
              </div>
              <Switch
                checked={settings.pollenHigh}
                onCheckedChange={(checked) => setSettings({ ...settings, pollenHigh: checked })}
              />
            </div>

            <div className="flex items-center justify-between p-3 rounded-lg hover:bg-yellow-50 transition-colors">
              <div className="flex items-center gap-3">
                <Icon name="AlertCircle" size={18} className="text-yellow-600" />
                <div>
                  <div className="font-medium text-[#34495E]">–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—ã–ª—å—Ü—ã</div>
                  <div className="text-xs text-[#34495E]/60">–ò–Ω–¥–µ–∫—Å 4.0-9.0</div>
                </div>
              </div>
              <Switch
                checked={settings.pollenMedium}
                onCheckedChange={(checked) => setSettings({ ...settings, pollenMedium: checked })}
              />
            </div>

            <div className="flex items-center justify-between p-3 rounded-lg hover:bg-orange-50 transition-colors">
              <div className="flex items-center gap-3">
                <Icon name="CloudRain" size={18} className="text-orange-600" />
                <div>
                  <div className="font-medium text-[#34495E]">–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞</div>
                  <div className="text-xs text-[#34495E]/60">–®—Ç–æ—Ä–º—ã, –º–µ—Ç–µ–ª–∏, —É—Ä–∞–≥–∞–Ω—ã</div>
                </div>
              </div>
              <Switch
                checked={settings.weatherAlert}
                onCheckedChange={(checked) => setSettings({ ...settings, weatherAlert: checked })}
              />
            </div>

            <div className="space-y-3">
              <div className="flex items-center justify-between p-3 rounded-lg hover:bg-blue-50 transition-colors">
                <div className="flex items-center gap-3">
                  <Icon name="Calendar" size={18} className="text-blue-600" />
                  <div>
                    <div className="font-medium text-[#34495E]">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑</div>
                    <div className="text-xs text-[#34495E]/60">–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞</div>
                  </div>
                </div>
                <Switch
                  checked={settings.dailyForecast}
                  onCheckedChange={(checked) => setSettings({ ...settings, dailyForecast: checked })}
                />
              </div>
              {settings.dailyForecast && (
                <div className="ml-12 flex items-center gap-3">
                  <Label htmlFor="forecast-time" className="text-sm text-[#34495E]">–í—Ä–µ–º—è:</Label>
                  <Input
                    id="forecast-time"
                    type="time"
                    value={settings.dailyForecastTime}
                    onChange={(e) => setSettings({ ...settings, dailyForecastTime: e.target.value })}
                    className="w-32"
                  />
                </div>
              )}
            </div>
          </div>
        </div>

        <div className="flex gap-3">
          <Button 
            onClick={handleSave}
            className="flex-1 bg-gradient-to-r from-[#4A90E2] to-[#98D8C8] hover:opacity-90"
          >
            <Icon name="Save" size={18} className="mr-2" />
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          </Button>
          <Button 
            onClick={handleTestNotification}
            variant="outline"
            className="flex-1"
          >
            <Icon name="Send" size={18} className="mr-2" />
            –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          </Button>
        </div>
      </div>
    </Card>
  );
}